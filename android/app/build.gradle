def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    namespace("com.starship.android")
    buildFeatures {
        buildConfig true
    }
    ndkVersion "26.0.10792818"
    compileSdkVersion 33
    defaultConfig {
        if (buildAsApplication) {
            applicationId "com.starship.android"
        }
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 5
        versionName "1.0.0"
        externalNativeBuild {
            cmake {
                 arguments "-DSDL_SHARED=ON", "-DANDROID_STL=c++_static", "-DHAVE_LD_VERSION_SCRIPT=OFF",'-DUSE_OPENGLES=ON'
                 // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                 abiFilters 'arm64-v8a' 
            }
        }
    }

    // âœ… Universal APK: disables split APKs per ABI
    // splits {
    //    abi {
    //        enable false
    //    }
    //}

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            cmake {
                 path '../../CMakeLists.txt'
                 version "3.31.5"
            }
        }
    }
    lintOptions {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.core:core:1.7.0' // Use the latest version
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
}

task wrapper(type: Wrapper) {
    gradleVersion = '8.3.2'
}

task prepareKotlinBuildScriptModel {
}
